apiVersion: v1
kind: ConfigMap
metadata:
  name: scripts
data:
  preload_headless.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install zip
    HOME="/app"

    APP_PROTOCOL_VERSION=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:4}"
    GENESIS_BLOCK_PATH="https://release.nine-chronicles.com/genesis-block-9c-main"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="02529a61b9002ba8f21c858224234af971e962cac9bd7e6b365e71e125c6463478"
    SEED1="027bd36895d68681290e570692ad3736750ceaab37be402442ffb203967f98f7b6,a57000af8397d4774b279f1fe09eccce-332461311.ap-northeast-2.elb.amazonaws.com,31236"
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn.planetarium.dev:3478"

    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"

    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
    }

    function preload_complete() {
      echo "$1"
    }

    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }

    function run_headless() {
      chmod 777 -R "$STORE_PATH"

      "$HEADLESS" \
          --workers=50 \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --peer "$SEED1" \
          > "$HEADLESS_LOG" 2>&1 &

      PID="$!"

      echo "$PID" | tee "$PID_FILE"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    }

    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi

      if timeout 1800 tail -f "$HEADLESS_LOG" | grep -m1 "Preloading finished;"; then
        sleep 30
      else
        senderr "grep failed. Failed to preload."
        kill "$PID"
        exit 1
      fi
    }

    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill "$PID"
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }

    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP

    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
  upload_snapshot.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo

    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    sudo ./aws/install

    HOME="/app"
    STORE_PATH="/data/headless"

    function senderr() {
      echo "$1"
    }

    function make_and_upload_snapshot() {
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      URL="https://snapshots.nine-chronicles.com/audit/latest.json"

      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi

      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH"  --block-before 50 --apv "v1000"; then
        senderr "Snapshot creation failed." $1
        exit 1
      fi

      # shellcheck disable=SC2012
      LATEST_SNAPSHOT=$(ls -t $PARTITION_DIR/*.zip | head -1)
      # shellcheck disable=SC2012
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_SNAPSHOT_FILENAME=$(basename "$LATEST_SNAPSHOT")
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_FILENAME="latest"
      UPLOAD_SNAPSHOT_FILENAME="$UPLOAD_FILENAME.zip"
      UPLOAD_METADATA_FILENAME="$UPLOAD_FILENAME.json"
      SNAPSHOT_FILENAME=$(echo $LATEST_SNAPSHOT_FILENAME | cut -d'.' -f 1)
      # shellcheck disable=SC2012
      LATEST_STATE=$(ls -t $STATE_DIR/*.zip | head -1)
      LATEST_STATE_FILENAME=$(basename "$LATEST_STATE")
      STATE_FILENAME=$(echo $LATEST_STATE_FILENAME | cut -d'.' -f 1)

      S3_BUCKET_NAME="9c-snapshots"
      S3_LATEST_SNAPSHOT_PATH="$1/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_METADATA_PATH="$1/$UPLOAD_METADATA_FILENAME"

      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id" | base64)"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key" | base64)"
      "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json

      "$AWS" s3 cp "$LATEST_SNAPSHOT" "s3://$S3_BUCKET_NAME/$1/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/$1/$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_STATE" "s3://$S3_BUCKET_NAME/$1/$LATEST_STATE_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/$1/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_SNAPSHOT_PATH" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/$1/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_METADATA_PATH" --quiet --acl public-read

      CF_DISTRIBUTION_ID="EAU4XRUZSBUD5"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$1/$SNAPSHOT_FILENAME.*"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$1/$UPLOAD_FILENAME.*"
      "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "/$1/$STATE_FILENAME.*"

      rm "$LATEST_SNAPSHOT"
      rm "$LATEST_STATE"
      rm -r "$METADATA_DIR"
    }

    trap '' HUP

    make_and_upload_snapshot $1
  download-snapshot.ps1: |-
    $baseUrl = $args[0]
    $file_path = $args[1]
    $latest = "$($baseUrl)latest.json"
    $latestState = "$($baseUrl)state_latest.zip"

    echo "Clear existing store path"
    Remove-Item $file_path -Recurse -Force

    $epoch = Invoke-WebRequest $latest |
    ConvertFrom-Json |
    Select BlockEpoch, TxEpoch, PreviousBlockEpoch, PreviousTxEpoch

    $myarray = [System.Collections.ArrayList]::new()
    [void]$myarray.Add($epoch)

    echo "Calculating total amount of snapshots to download."

    while($true)
    {
      $nextEpochMeta = "$($baseUrl)snapshot-$($epoch.PreviousBlockEpoch)-$($epoch.PreviousTxEpoch).json"
      $epoch = Invoke-WebRequest $nextEpochMeta |
        ConvertFrom-Json |
        Select BlockEpoch, TxEpoch, PreviousBlockEpoch, PreviousTxEpoch
      [void]$myarray.Add($epoch)
      if( 0 -eq $epoch.PreviousBlockEpoch )
      {
        break;
      }
    }

    echo "Calculate finish. Number of $($myarray.count) snapshot download start."
    foreach($currentEpoch in $myarray) {
      $filename = "snapshot-$($currentEpoch.BlockEpoch)-$($currentEpoch.TxEpoch).zip"
      echo "Download $($filename)."
      $nextsnapshot = "$($baseUrl)$($filename)"
      Invoke-WebRequest -Uri $nextsnapshot -Outfile $filename
    }

    $filename = "state_latest.zip"
    echo "Download State."
    Invoke-WebRequest -Uri  $latestState -Outfile $filename

    echo "Download finish. snapshot extracting start."
    $myarray.Reverse()

    foreach($currentEpoch in $myarray) {
      $filename = "snapshot-$($currentEpoch.BlockEpoch)-$($currentEpoch.TxEpoch).zip"
      echo "Extract $($filename)."
      Expand-Archive -Path $filename -DestinationPath $file_path -Force
    }

    $filename = "state_latest.zip"
    echo "Extract State."
    Expand-Archive -Path $filename -DestinationPath $file_path -Force

    echo "Extract finish. all snapshot download finish"

    Remove-Item "*.zip"
