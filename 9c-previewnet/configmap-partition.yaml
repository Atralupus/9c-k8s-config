apiVersion: v1
kind: ConfigMap
metadata:
  name: snapshot-script
data:
  download_snapshot.sh: |-
    #!/usr/bin/env bash

    cd /data

    apk update
    apk add curl jq wget sudo zip

    base_url=${1:-https://snapshots.nine-chronicles.com/previewnet/partition}
    save_dir=${2:-"9c-main-snapshot_$(date +%Y%m%d_%H)"}
    download_option=$3

    if [ $download_option = y ]
    then
      echo "Start download snapshot"
      # strip tailing slash
      base_url=${base_url%/}

      function get_snapshot_value() {
          snapshot_json_url="$1"
          snapshot_param="$2"

          snapshot_param_return_value=$(curl --silent "$snapshot_json_url" | jq ".$snapshot_param")
          echo "$snapshot_param_return_value"
      }

      function download_unzip_snapshot() {
          snapshot_json_filename="latest.json"
          snapshot_zip_filename="state_latest.zip"
          snapshot_zip_filename_array=("$snapshot_zip_filename")

          while :
          do
              snapshot_json_url="$base_url/$snapshot_json_filename"
              echo "$snapshot_json_url"

              BlockEpoch=$(get_snapshot_value "$snapshot_json_url" "BlockEpoch")
              TxEpoch=$(get_snapshot_value "$snapshot_json_url" "TxEpoch")
              PreviousBlockEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousBlockEpoch")
              PreviousTxEpoch=$(get_snapshot_value "$snapshot_json_url" "PreviousTxEpoch")

              snapshot_zip_filename="snapshot-$BlockEpoch-$TxEpoch.zip"
              snapshot_zip_filename_array+=("$snapshot_zip_filename")

              if [ "$PreviousBlockEpoch" -eq 0 ]
              then
                  break
              fi

              snapshot_json_filename="snapshot-$PreviousBlockEpoch-$PreviousTxEpoch.json"
          done

          echo "MKDIR $save_dir"
          mkdir -p "$save_dir"

          for ((i=${#snapshot_zip_filename_array[@]}-1; i>=0; i--))
          do
              snapshot_zip_filename="${snapshot_zip_filename_array[$i]}"
              rm "$snapshot_zip_filename" 2>/dev/null

              snapshot_zip_url="$base_url/$snapshot_zip_filename"
              echo "$snapshot_zip_url"

              wget -q "$snapshot_zip_url"
              echo "Unzipping $snapshot_zip_filename"
              unzip -o "$snapshot_zip_filename" -d "$save_dir"
              rm "$snapshot_zip_filename"
          done
      }

      DIRECTORY="$save_dir"
      echo "$DIRECTORY"
      if [[ -d "$DIRECTORY" ]]
      then
          echo "[Info] The directory $save_dir exists and is deleted."
          sudo rm -rf "$save_dir"
      fi

      download_unzip_snapshot

      # The return value for the program that calls this script
      echo "$save_dir"
    else
      echo "Skip download snapshot"
    fi
  preload_headless.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install zip
    apt-get -y install curl
    HOME="/app"

    APP_PROTOCOL_VERSION=$1
    SLACK_TOKEN=$1
    VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:4}"
    GENESIS_BLOCK_PATH="https://release.nine-chronicles.com/genesis-block-preview-net"
    STORE_PATH="/data/headless"
    TRUSTED_APP_PROTOCOL_VERSION_SIGNER="02182d2d97a0cbc56c84b3eff293ca3aadc3baab6e3bc1359c0c93d0ab4eb0d1d9"
    SEED1="027bd36895d68681290e570692ad3736750ceaab37be402442ffb203967f98f7b6,9c-previewnet-tcp.planetarium.dev,31236"
    ICE_SERVER="turn://0ed3e48007413e7c2e638f13ddd75ad272c6c507e081bd76a75e4b7adc86c9af:0apejou+ycZFfwtREeXFKdfLj2gCclKzz5ZJ49Cmy6I=@turn-us.planetarium.dev:3478"

    HEADLESS="$HOME/NineChronicles.Headless.Executable"
    HEADLESS_LOG_NAME="headless_$(date -u +"%Y%m%d%H%M").log"
    HEADLESS_LOG_DIR="/data/snapshot_logs"
    HEADLESS_LOG="$HEADLESS_LOG_DIR/$HEADLESS_LOG_NAME"
    mkdir -p "$HEADLESS_LOG_DIR"

    PID_FILE="$HOME/headless_pid"
    function senderr() {
      echo "$1"
      curl --data "[K8S] $1. Check snapshot-v$VERSION_NUMBER in 9c-previewnet cluster at preload_headless.sh." $'https://planetariumhq.slack.com/services/hooks/slackbot?token=$SLACK_TOKEN&channel=%239c-previewnet'
    }

    function preload_complete() {
      echo "$1"
    }

    function waitpid() {
      PID="$1"
      while [ -e "/proc/$PID" ]; do
        sleep 1
      done
    }

    function run_headless() {
      chmod 777 -R "$STORE_PATH"

      "$HEADLESS" \
          --workers=50 \
          --no-miner \
          --genesis-block-path="$GENESIS_BLOCK_PATH" \
          --store-type=rocksdb \
          --store-path="$STORE_PATH" \
          --app-protocol-version="$APP_PROTOCOL_VERSION" \
          --trusted-app-protocol-version-signer="$TRUSTED_APP_PROTOCOL_VERSION_SIGNER" \
          --ice-server="$ICE_SERVER" \
          --peer "$SEED1" \
          --network-type=permanent \
          > "$HEADLESS_LOG" 2>&1 &

      PID="$!"

      echo "$PID" | tee "$PID_FILE"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi
    }

    function wait_preloading() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"

      if ! kill -0 "$PID"; then
        senderr "$PID doesn't exist. Failed to run headless"
        exit 1
      fi

      if timeout 18000 tail -f "$HEADLESS_LOG" | grep -m1 "CompleteBlocksAsync finished;"; then
        sleep 30
      else
        senderr "grep failed. Failed to preload."
        kill "$PID"
        exit 1
      fi
    }

    function kill_headless() {
      touch "$PID_FILE"
      PID="$(cat "$PID_FILE")"
      if ! kill -0 "$PID"; then
        echo "$PID doesn't exist. Failed to kill headless"
      else
        kill -KILL "$PID"
        waitpid "$PID" || true
        chmod 777 -R "$STORE_PATH"
      fi
    }

    function rotate_log() {
      cd "$HEADLESS_LOG_DIR"
      if ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log; then
        zip "$(date -d 'yesterday' -u +'%Y%m%d')".zip ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
        rm ./*"$(date -d 'yesterday' -u +'%Y%m%d')"*.log
      fi
    }
    trap '' HUP

    run_headless
    wait_preloading
    preload_complete "Preloading completed"
    kill_headless
    rotate_log
  upload_snapshot.sh: |-
    #!/usr/bin/env bash
    set -ex

    apt-get -y update
    apt-get -y install curl
    apt-get -y install zip
    apt-get -y install unzip
    apt-get -y install sudo

    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    sudo ./aws/install

    HOME="/app"
    STORE_PATH="/data/headless"
    SLACK_TOKEN=$2
    CF_DISTRIBUTION_ID=$3

    function senderr() {
      echo "$1"
      curl --data "[K8S] $1. Check snapshot-partition-$2 in 9c-previewnet cluster at upload_snapshot.sh." $'https://planetariumhq.slack.com/services/hooks/slackbot?token=$SLACK_TOKEN&channel=%239c-previewnet'
    }

    function make_and_upload_snapshot() {
      APP_PROTOCOL_VERSION=$1
      VERSION_NUMBER="${APP_PROTOCOL_VERSION:0:6}"
      SNAPSHOT="$HOME/NineChronicles.Snapshot"
      OUTPUT_DIR="/data/snapshots"
      PARTITION_DIR="/data/snapshots/partition"
      STATE_DIR="/data/snapshots/state"
      METADATA_DIR="/data/snapshots/metadata"
      FULL_DIR="/data/snapshots/full"
      URL="https://snapshots.nine-chronicles.com/previewnet/partition/latest.json"

      mkdir -p "$OUTPUT_DIR" "$PARTITION_DIR" "$STATE_DIR" "$METADATA_DIR"
      if curl --output /dev/null --silent --head --fail "$URL"; then
        curl "$URL" -o "$METADATA_DIR/latest.json"
      else
        echo "URL does not exist: $URL"
      fi

      if ! "$SNAPSHOT" --output-directory "$OUTPUT_DIR" --store-path "$STORE_PATH"  --block-before 10 --apv "$1" --snapshot-type "partition"; then
        senderr "Snapshot creation failed."
        exit 1
      fi

      # shellcheck disable=SC2012
      LATEST_SNAPSHOT=$(ls -t $PARTITION_DIR/*.zip | head -1)
      # shellcheck disable=SC2012
      LATEST_METADATA=$(ls -t $METADATA_DIR/*.json | head -1)
      LATEST_SNAPSHOT_FILENAME=$(basename "$LATEST_SNAPSHOT")
      LATEST_METADATA_FILENAME=$(basename "$LATEST_METADATA")
      UPLOAD_FILENAME="latest"
      UPLOAD_SNAPSHOT_FILENAME="$UPLOAD_FILENAME.zip"
      UPLOAD_METADATA_FILENAME="$UPLOAD_FILENAME.json"
      SNAPSHOT_FILENAME=$(echo $LATEST_SNAPSHOT_FILENAME | cut -d'.' -f 1)
      # shellcheck disable=SC2012
      LATEST_STATE=$(ls -t $STATE_DIR/*.zip | head -1)
      LATEST_STATE_FILENAME=$(basename "$LATEST_STATE")
      STATE_FILENAME=$(echo $LATEST_STATE_FILENAME | cut -d'.' -f 1)

      S3_BUCKET_NAME="9c-snapshots"
      S3_LATEST_SNAPSHOT_PATH="previewnet/partition/$UPLOAD_SNAPSHOT_FILENAME"
      S3_LATEST_METADATA_PATH="previewnet/partition/$UPLOAD_METADATA_FILENAME"

      AWS="/usr/local/bin/aws"
      AWS_ACCESS_KEY_ID="$(cat "/secret/aws_access_key_id" | base64)"
      AWS_SECRET_ACCESS_KEY="$(cat "/secret/aws_secret_access_key" | base64)"
      "$AWS" configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      "$AWS" configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      "$AWS" configure set default.region us-east-2
      "$AWS" configure set default.output json
      NOW=$(date '+%Y%m%d%H%M%S')

      "$AWS" s3 cp "$LATEST_SNAPSHOT" "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_METADATA" "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "$LATEST_STATE" "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_STATE_FILENAME" --quiet --acl public-read

      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/previewnet/partition/archive/snapshots/${NOW}_$LATEST_SNAPSHOT_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/previewnet/partition/archive/metadata/${NOW}_$LATEST_METADATA_FILENAME" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_STATE_FILENAME" "s3://$S3_BUCKET_NAME/previewnet/partition/archive/states/${NOW}_$LATEST_STATE_FILENAME" --quiet --acl public-read

      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_SNAPSHOT_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_SNAPSHOT_PATH" --quiet --acl public-read
      "$AWS" s3 cp "s3://$S3_BUCKET_NAME/previewnet/partition/$LATEST_METADATA_FILENAME" "s3://$S3_BUCKET_NAME/$S3_LATEST_METADATA_PATH" --quiet --acl public-read
      invalidate_cf "/previewnet/partition/$SNAPSHOT_FILENAME.*"
      invalidate_cf "/previewnet/partition/$UPLOAD_FILENAME.*"
      invalidate_cf "/previewnet/partition/$STATE_FILENAME.*"

      rm "$LATEST_SNAPSHOT"
      rm "$LATEST_STATE"
      rm -r "$METADATA_DIR"
    }

    function invalidate_cf() {
      if "$AWS" cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" --paths "$1"; then
        echo "CF invalidation successful"
      else
        echo "CF invalidation failed. Trying again."
        invalidate_cf "$1"
      fi
    }

    trap '' HUP

    make_and_upload_snapshot $1
